import rclpy
from rclpy.node import Node
from sensor_msgs.msg import Image, CameraInfo
from cv_bridge import CvBridge
import cv2
import numpy as np
from rclpy import qos
import image_geometry
from nav_msgs.msg import OccupancyGrid

class OccupancyGridUpdater(Node):
    def __init__(self,main_node):
        super().__init__('occupancy_grid_updater', namespace='', context=main_node.context)
        self.main_node = main_node
        self.occupancy_grid = np.zeros((100, 100), dtype=np.int8)  # Adjust the size as needed
        self.cv_bridge = CvBridge()
        self.occupancy_grid_publisher = self.create_publisher(OccupancyGrid, '/occupancy_grid', 10)
        self.timer = self.create_timer(1.0, self.publish_occupancy_grid)

    def update_occupancy_grid(self, contours):
        self.occupancy_grid = np.zeros_like(self.occupancy_grid, dtype=np.int8)
        for contour in contours:
            if isinstance(contour, dict):
            
             continue

            print(f"Contour Type: {type(contour)}")
            contour_cells = np.round(contour).astype(int)

             # Update occupancy grid cells
            
            self.occupancy_grid[contour_cells[:, 1], contour_cells[:, 0]] = 100  # Assuming 100 represents occupied, adjust as needed

    def publish_occupancy_grid(self):
        occupancy_grid_msg = OccupancyGrid()
        occupancy_grid_msg.header.stamp = self.get_clock().now().to_msg()
        occupancy_grid_msg.header.frame_id = 'your_frame_id'  # Replace with the appropriate frame ID
        occupancy_grid_msg.info.map_load_time = self.get_clock().now().to_msg()
        occupancy_grid_msg.info.resolution = 0.1  # Adjust the resolution as needed
        occupancy_grid_msg.info.width = self.occupancy_grid.shape[1]
        occupancy_grid_msg.info.height = self.occupancy_grid.shape[0]
        occupancy_grid_msg.info.origin.position.x = 0.0
        occupancy_grid_msg.info.origin.position.y = 0.0
        occupancy_grid_msg.info.origin.position.z = 0.0
        occupancy_grid_msg.info.origin.orientation.x = 0.0
        occupancy_grid_msg.info.origin.orientation.y = 0.0
        occupancy_grid_msg.info.origin.orientation.z = 0.0
        occupancy_grid_msg.info.origin.orientation.w = 1.0
        occupancy_grid_msg.data = self.occupancy_grid.flatten().tolist()

        self.occupancy_grid_publisher.publish(occupancy_grid_msg)
        #self.occupancy_grid_publisher.publish(occupancy_grid_msg)
        print("Occupancy Grid Published") 

class ContourDetectionNode(Node):
    camera_model = None
    cumulative_count = 0

    def __init__(self,main_node):
        super().__init__('contour_detection_node', namespace='', context=main_node.context)
        self.main_node = main_node
        self.subscription = self.create_subscription(Image, '/limo/depth_camera_link/image_raw', 
                                                self.image_callback, qos_profile=qos.qos_profile_sensor_data)
        self.camera_info_sub = self.create_subscription(CameraInfo, '/limo/depth_camera_link/camera_info',
                                                self.camera_info_callback, 
                                                qos_profile=qos.qos_profile_sensor_data)

        self.cv_bridge = CvBridge()
        self.occupancy_grid_updater = OccupancyGridUpdater(main_node)

        # Initialize previous contours
        self.previous_potholes = []
        self.pothole_id = 0

    def image_callback(self, msg):
        try:
            # Convert ROS Image message to OpenCV image
            cv_image = self.cv_bridge.imgmsg_to_cv2(msg, desired_encoding='bgr8')
        except Exception as e:
            self.get_logger().info(f'Error converting image: {str(e)}')
            return

        # Apply magenta color contour detection
        result = self.detect_magenta_contours(cv_image)
        
        # Update the occupancy grid based on the detected contours
        self.occupancy_grid_updater.update_occupancy_grid(self.previous_potholes)

        # Display the result
        cv2.imshow('Magenta Contours', result)
        cv2.waitKey(1)

    def camera_info_callback(self, msg):
        if not self.camera_model:
            self.camera_model = image_geometry.PinholeCameraModel()
        self.camera_model.fromCameraInfo(msg) 
        #camera_matrix = msg.k
        #distortion_coefficients = msg.d

        # Print or use camera info data as per your requirement
       # self.get_logger().info(f'Camera Info - Camera Matrix: {camera_matrix}, Distortion Coefficients: {distortion_coefficients}')

    def detect_magenta_contours(self, image):
        # Convert the image from BGR to HSV color space
        hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)

        # Define the lower and upper bounds for magenta color in HSV
        lower_magenta = np.array([140, 50, 50])
        upper_magenta = np.array([170, 255, 255])

        lower_color = np.array([0, 0, 47])  # Adjust as needed
        upper_color = np.array([15, 15, 57])  # Adjust as needed

        # Threshold the image to obtain the magenta color regions
        mask = cv2.inRange(hsv, lower_magenta, upper_magenta)
        #mask = cv2.inRange(hsv, lower_color, upper_color)

        # Find contours in the binary mask
        contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

        # Filter contours based on area or other criteria if needed
        filtered_contours = []
        for contour in contours:
            if cv2.contourArea(contour) > 10:
                filtered_contours.append(contour)

        # Compare with previous contours to eliminate duplicates
        self.current_potholes = []
        for contour in filtered_contours:
            contour_center = self.get_contour_center(contour)
            pothole_found = False

            # Check if the contour has already been counted
            for prev_pothole in self.previous_potholes:
                prev_center = prev_pothole['center']
                if self.distance_between_points(contour_center, prev_center) < 10:
                    pothole_found = True
                    break

            if not pothole_found:
                self.pothole_id += 1
                self.current_potholes.append({'id': self.pothole_id, 'contour': contour, 'center': contour_center})

        # Update previous contours
        self.previous_potholes = self.current_potholes
        contours_count = 0 
        # Draw the contours on the original image and assign cumulative IDs
        result = image.copy()
        for pothole in self.current_potholes:
            contour = pothole['contour']
            area = cv2.contourArea(contour)
            if area > 1000:

                cv2.drawContours(result, [contour], -1, (0, 255, 0), 2)
                center = pothole['center']
                contours_count += 1
                #cv2.putText(result, contour_size_text, (center[0], center[1]), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 2)
                cv2.putText(result, str(contours_count), (center[0], center[1]), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2)
                # Increment cumulative count
                ContourDetectionNode.cumulative_count += 1
                #cv2.putText(result, str(ContourDetectionNode.cumulative_count), (center[0], center[1]), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2)
        #print(ContourDetectionNode.cumulative_count) 
        #print("Filtered Contours:", filtered_contours)
        #print("Previous Potholes:", self.previous_potholes)
        return result
    def get_contour_center(self, contour):
        M = cv2.moments(contour)
        if M["m00"] != 0:
            cX = int(M["m10"] / M["m00"])
            cY = int(M["m01"] / M["m00"])
            return (cX, cY)
        else:
            return None

    def distance_between_points(self, p1, p2):
        return np.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2)
def main(args=None):
    rclpy.init(args=args)

    # Create a single node for the entire application
    main_node = rclpy.create_node('main_node')

    # Create instances of your components
    contour_detection_node = ContourDetectionNode(main_node)
    occupancy_grid_updater = OccupancyGridUpdater(main_node)

    try:
        # Spin the main node
        rclpy.spin(main_node)
    finally:
        # Destroy the nodes when the main loop is interrupted
        main_node.destroy_node()
        contour_detection_node.destroy_node()
        occupancy_grid_updater.destroy_node()

        # Shutdown ROS
        rclpy.shutdown()

if __name__ == '__main__':
    main()
